
# If the module has SWIG file, add -fPIC flag
ifneq ($(SWIG_MODULE),)
	CFLAGS += -fPIC
endif

ifeq ($(CPP_CALL_PATH), 1 )
#	CFLAGS += `python3-config --cflags`
#	OFLAGS += `python3-config --ldflags`
	CFLAGS += `python3-config --includes`
	OFLAGS += `python3-config --libs`
endif

# PROTO file
PROTO_INTS :=  $(addsuffix .proto, $(PROTOC_MODULE))

# PROTO generated source file
PROTO_SRCS_CC := $(patsubst %.proto,%.pb.cc, $(PROTO_INTS))

# SWIG interface file
SWIG_INTS := $(wildcard *.i)

# SWIG generated source file
SWIG_SRCS_1 := $(patsubst %.i,%_wrap.cxx, $(SWIG_INTS))

# SWIG C++ extension libs
SWIG_SO_LIBS_1 := $(patsubst %,%.so, $(SWIG_MODULE))
SWIG_SO_LIBS := $(addprefix $(BUILD_DIR)$(X)$(MODULE)$(X)_, $(SWIG_SO_LIBS_1))

# Source File
SRCS_1 := $(PROTO_SRCS_CC) $(wildcard *.cpp *.cc *.c) $(SWIG_SRCS_1) $(INCLUDE_SRCFILE)
SRCS := $(filter-out $(EXCLUDE_SRCFILE), $(SRCS_1))

# Object File
OBJS_1 := $(patsubst %.cpp,%.$(OEXT), $(SRCS))
OBJS_2 := $(patsubst %.cc,%.$(OEXT),  $(OBJS_1))
OBJS_3 := $(patsubst %.c,%.$(OEXT),   $(OBJS_2))
OBJS_4 := $(patsubst %.cxx,%.$(OEXT), $(OBJS_3))
OBJS := $(addprefix $(BUILD_DIR)$(X)$(MODULE)$(X), $(notdir $(OBJS_4)))

# Dependence File
ALL_SRCS = $(SRCS) $(PYTHON_SRC)
DEPS_1 := $(patsubst %.cpp,%.$(DEXT), $(ALL_SRCS))
DEPS_2 := $(patsubst %.cc,%.$(DEXT),  $(DEPS_1))
DEPS_3 := $(patsubst %.c,%.$(DEXT),   $(DEPS_2))
DEPS_4 := $(patsubst %.cxx,%.$(DEXT), $(DEPS_3))
DEPS_5 := $(patsubst %.py,%.$(DEXT),  $(DEPS_4))
DEPS := $(addprefix $(BUILD_DIR)$(X)$(MODULE)$(X), $(notdir $(DEPS_5)))

# Dependent Files
-include $(SWIG_DEPS)
-include $(DEPS)

# Compile rules
# Compile C++ source file (.cc)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(OEXT):%.cc
	@echo "[CCPP ] " $@
	$(CCPP) -c  $(CFLAGS) -o $@ $< -I$(BUILD_DIR)$(X)$(MODULE)$(X)

# Compile C++ source file (.cpp)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(OEXT):%.cpp
	@echo "[CCPP ] " $@
	$(CCPP) -c  $(CFLAGS) -o $@ $< -I$(BUILD_DIR)$(X)$(MODULE)$(X)

# Compile C++ source file generated by SWIG (.cxx)
$(BUILD_DIR)$(X)$(MODULE)$(X)%_wrap.$(OEXT):%.i
	@echo "[SWIG ] " $(patsubst %.$(OEXT),%.cxx,$@)
	$(SWIG) -o $(patsubst %.$(OEXT),%.cxx,$@) -I$(BUILD_DIR)$(X)$(MODULE)$(X) $< 
	@echo "[CCPP ] " $@
	$(CCPP) -c  $(CFLAGS) -I$(PY3_DIR) -I. -o $@ $(patsubst %.$(OEXT),%.cxx,$@) -I$(BUILD_DIR)$(X)$(MODULE)$(X)

# Compile C++ source file generated by PROTO (.proto)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.pb.$(OEXT):%.proto
	@echo "[PROTO] " $(patsubst %.$(OEXT),%.cc,$@)
	$(PROTO) $< --cpp_out=$(BUILD_DIR)$(X)$(MODULE)$(X)
	@echo "[CCPP ] " $@
	$(CCPP) -c  $(CFLAGS) -I. -o $@ $(patsubst %.$(OEXT),%.cc,$@) -I$(BUILD_DIR)$(X)$(MODULE)$(X)

# Compile C source file (.c)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(OEXT):%.c
	@echo "[CC   ] " $@
	$(CC)   -c  $(CFLAGS) -o $@ $< -I$(BUILD_DIR)$(X)$(MODULE)$(X)

# Dependence rules
# Dependence file for C++ source file (.cc)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(DEXT):%.cc
	@echo "[DEP  ] " $@
	$(CCPP) -MM -MG $(CFLAGS) $< \
		| sed "s?$(patsubst %.cc,%\.$(OEXT),$<)?$(patsubst %.d,%\.$(OEXT),$@)?" \
		| sed "s?\.pb\.h?\.proto?" \
		> $@

# Dependence file for C++ source file (.cpp)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(DEXT):%.cpp
	@echo "[DEP  ] " $@
	$(CCPP) -MM -MG $(CFLAGS) $< \
		| sed "s?$(patsubst %.cpp,%\.$(OEXT),$<)?$(patsubst %.d,%\.$(OEXT),$@)?" \
		| sed "s?\.pb\.h?\.proto?" \
		> $@

# Dependence file for C source file (.c)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(DEXT):%.c
	@echo "[DEP  ] " $@
	$(CC)   -MM -MG $(CFLAGS) $< | sed "s?$(patsubst %.c,%\.$(OEXT),$<)?$(patsubst %.d,%\.$(OEXT),$@)?" > $@

# Dependence file for C++ source file generated by SWIG file (.i)
$(BUILD_DIR)$(X)$(MODULE)$(X)%_wrap.$(DEXT):%.i
	@echo "[DEP  ] " $@
	$(SWIG) -MM $< | sed "s?$(patsubst %.i,%_wrap\.cxx,$<)?$(patsubst %.$(DEXT),%\.$(OEXT),$@)?" > $@

# Dependence file for C++ source file generated by SWIG file (.i)
$(BUILD_DIR)$(X)$(MODULE)$(X)%.pb.$(DEXT):%.proto
	@echo "[DEP  ] " $@
	@echo "$(patsubst %.pb.$(DEXT),%.pb.$(OEXT),$@):$<" > $@

# Dependence file for C++ source file generated by protobuf file (.protoc)
$(BUILD_DIR)$(X)$(MODULE)$(X)%_pb2.$(DEXT):%.proto
	@echo "[DEP  ] " $@
	@echo "$(patsubst %.$(DEXT),%.py,$@):$<" > $@

# Dependence file for python source file
$(BUILD_DIR)$(X)$(MODULE)$(X)%.$(DEXT):%.py
	@echo "[DEP  ] " $@
	@echo "$(patsubst %.$(DEXT),%.py,$@):$<" > $@

# Compile python source file generated by PROTO (.proto)
$(BUILD_DIR)$(X)$(MODULE)$(X)%_pb2.py:%.proto
	@echo "[PROTO] " $(patsubst %.$(OEXT),%.py,$@)
	$(PROTO) $< --python_out=$(BUILD_DIR)$(X)$(MODULE)$(X)

# Python source file to copy
$(BUILD_DIR)$(X)$(MODULE)$(X)%.py:%.py
	@echo "[COPY ] " $@
	$(CP) $< $(BUILD_DIR)$(X)$(MODULE)

# Rules
.PHONY: clean

SUBMODULE_DEP := $(addprefix dep_, $(SUBMODULE) )
SUBMODULE_OBJ := $(addprefix obj_, $(SUBMODULE) )

# task to generate dependence files
depend: $(DEPS) $(SWIG_DEPS) $(SUBMODULE_DEP)

$(SUBMODULE_DEP):
	$(MKDIR) $(BUILD_DIR)$(X)$(MODULE)$(X)$(patsubst dep_%,%, $@)
	$(MAKE) -C $(patsubst dep_%, %, $@) depend

# task to generate object file, dynamic library, and copy python file.
objs: $(OBJS) $(SUBMODULE_OBJ)
	$(MAKE) pymodule

$(SUBMODULE_OBJ):
	$(MAKE) -C $(patsubst obj_%, %, $@) objs

pymodule: $(SWIG_SO_LIBS) \
	$(addprefix $(BUILD_DIR)$(X)$(MODULE)$(X), $(PYTHON_SRC) )

$(SWIG_SO_LIBS): $(OBJS)
	@echo "[SO   ] " $@
	$(CCPP) -shared $(OBJS) $(OFLAGS) -o $@ 

clean:
	$(RMDIR) $(BUILD_DIR)
	$(RMDIR) $(BIN_DIR)
